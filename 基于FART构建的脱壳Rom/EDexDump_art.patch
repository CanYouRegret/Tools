commit ada9d4e913a8ae29c3bb5554dac1324942591bc9
Author: huzhiyuan <huzhiyuan@excelliance.cn>
Date:   Mon Jul 18 10:37:35 2022 +0800

    add for EDexDump
    
    Change-Id: Ia7bf0504396579c1d7fed74f863aecb638099849

diff --git a/runtime/art_method.cc b/runtime/art_method.cc
index 89dc93b..63c2fe0 100644
--- a/runtime/art_method.cc
+++ b/runtime/art_method.cc
@@ -18,7 +18,9 @@
 
 #include <algorithm>
 #include <cstddef>
+#include <sys/stat.h>
 
+#include "android-base/properties.h"
 #include "android-base/stringprintf.h"
 
 #include "arch/context.h"
@@ -67,6 +69,249 @@ extern "C" void art_quick_invoke_static_stub(ArtMethod*, uint32_t*, uint32_t, Th
 static_assert(ArtMethod::kRuntimeMethodDexMethodIndex == dex::kDexNoIndex,
               "Wrong runtime-method dex method index");
 
+//------------------------------dex dump add begin--------------------------------
+uint8_t *codeitem_end(const uint8_t ** pData) {
+  uint32_t num_of_list = DecodeUnsignedLeb128(pData);
+  for (; num_of_list > 0; num_of_list--) {
+    int32_t num_of_handlers = DecodeSignedLeb128(pData);
+    int num = num_of_handlers;
+    if (num_of_handlers <= 0) {
+      num = -num_of_handlers;
+    }
+
+    for (; num > 0; num--) {
+      DecodeUnsignedLeb128(pData);
+      DecodeUnsignedLeb128(pData);
+    }
+    if (num_of_handlers <= 0) {
+      DecodeUnsignedLeb128(pData);
+    }
+  }
+  return (uint8_t *) (*pData);
+}
+
+extern "C" char *base64_encode(char *str, long str_len, long *outlen) {
+  long len;
+  char *res;
+  int i, j;
+  const char *base64_table =
+        "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
+  if (str_len % 3 == 0)
+    len = str_len / 3 * 4;
+  else
+    len = (str_len / 3 + 1) * 4;
+
+  res = (char *) malloc(sizeof(char) * (len + 1));
+  res[len] = '\0';
+  *outlen = len;
+  for (i = 0, j = 0; i < len - 2; j += 3, i += 4) {
+    res[i] = base64_table[str[j] >> 2];
+    res[i + 1] = base64_table[(str[j] & 0x3) << 4 | (str[j + 1] >> 4)];
+    res[i + 2] = base64_table[(str[j + 1] & 0xf) << 2 | (str[j + 2] >> 6)];
+    res[i + 3] = base64_table[str[j + 2] & 0x3f];
+  }
+
+  switch (str_len % 3) {
+    case 1:
+      res[i - 2] = '=';
+      res[i - 1] = '=';
+      break;
+    case 2:
+      res[i - 1] = '=';
+      break;
+    }
+
+  return res;
+}
+
+extern "C" void dumpDexFileByExecute(ArtMethod * artmethod)
+	 SHARED_LOCKS_REQUIRED(Locks::mutator_lock_) {
+  char *dexfilepath = (char *) malloc(sizeof(char) * 2048);
+  if (dexfilepath == nullptr) {
+    LOG(INFO) << "ArtMethod::dumpDexFileByExecute, methodname:" << artmethod->PrettyMethod().c_str() << "malloc 2048 byte failed";
+    return;
+  }
+
+  int fcmdline = -1;
+  char szCmdline[256] = {0};
+  char szProcName[256] = {0};
+  int procid = getpid();
+  sprintf(szCmdline, "/proc/%d/cmdline", procid);
+  fcmdline = open(szCmdline, O_RDONLY | O_CREAT, 0644);
+  if (fcmdline > 0) {
+    ssize_t s = read(fcmdline, szProcName, 256);
+    if (s >= 0) {
+      close(fcmdline);
+    }
+  }
+
+  std::string target_pkg = android::base::GetProperty("target.shelling.pkg", "");
+  if (!target_pkg.empty() && szProcName[0] && !strcmp(target_pkg.c_str(), szProcName)) {
+    const DexFile *dex_file = artmethod->GetDexFile();
+    const uint8_t *begin_ = dex_file->Begin();	// Start of data.
+    size_t size_ = dex_file->Size();	// Length of data.
+
+    memset(dexfilepath, 0, 2048);
+    int size_int_ = (int) size_;
+
+    sprintf(dexfilepath, "%s", "/sdcard/Download/EDexDump");
+    if (mkdir(dexfilepath, 0777) == -1) {}
+
+    memset(dexfilepath, 0, 2048);
+    sprintf(dexfilepath, "/sdcard/Download/EDexDump/%s", szProcName);
+    mkdir(dexfilepath, 0777);
+
+    memset(dexfilepath, 0, 2048);
+    sprintf(dexfilepath, "/sdcard/Download/EDexDump/%s/%d_dexfile_execute.dex", szProcName, size_int_);
+    int ret = access(dexfilepath, F_OK);
+    if (ret == -1) {
+      int dexfilefp = open(dexfilepath, O_CREAT | O_RDWR, 0666);
+      if (dexfilefp > 0) {
+        ssize_t se = write(dexfilefp, (void *) begin_, size_);
+        if (se < 0) {}
+        fsync(dexfilefp);
+        close(dexfilefp);
+      }
+    }
+  }
+  if (dexfilepath != nullptr) {
+    free(dexfilepath);
+    dexfilepath = nullptr;
+  }
+}
+
+extern "C" void dumpArtMethod(ArtMethod * artmethod)
+    SHARED_LOCKS_REQUIRED(Locks::mutator_lock_) {
+  char *dexfilepath = (char *) malloc(sizeof(char) * 2048);
+  if (dexfilepath == nullptr) {
+    LOG(INFO) << "ArtMethod::dumpArtMethod, methodname:" << artmethod->PrettyMethod().c_str() << "malloc 2048 byte failed";
+    return;
+  }
+
+  int fcmdline = -1;
+  char szCmdline[256] = {0};
+  char szProcName[256] = {0};
+  int procid = getpid();
+  sprintf(szCmdline, "/proc/%d/cmdline", procid);
+  fcmdline = open(szCmdline, O_RDONLY | O_CREAT, 0644);
+  if (fcmdline > 0) {
+    ssize_t s = read(fcmdline, szProcName, 256);
+    if (s > 0) {
+      close(fcmdline);
+    }
+  }
+  //char value[256] = {0};
+  //__system_property_get("target.shelling.pkg", value);
+
+  //获取当前进程名 是否是需要dump的应用
+  std::string target_pkg = android::base::GetProperty("target.shelling.pkg", "");
+  if (!target_pkg.empty() && szProcName[0] && !strcmp(target_pkg.c_str(), szProcName)) {
+    //获取当前方法所在的dex以及该dex的起始地址和大小
+    const DexFile *dex_file = artmethod->GetDexFile();
+    std::string methodname = artmethod->PrettyMethod().c_str();
+    const uint8_t *begin_ = dex_file->Begin();
+    size_t size_ = dex_file->Size();
+
+    memset(dexfilepath, 0, 2048);
+    int size_int_ = (int) size_;
+
+    strcpy(dexfilepath, "/sdcard/Download/EDexDump");
+    if (mkdir(dexfilepath, 0777) == -1) {
+        LOG(WARNING) << "ArtMethod::dumpArtMethod /sdcard/Download/EDexDump create failed.";
+    }
+
+    memset(dexfilepath, 0, 2048);
+    sprintf(dexfilepath, "/sdcard/Download/EDexDump/%s", szProcName);
+    if (mkdir(dexfilepath, 0777) == -1) {
+        LOG(WARNING) << "ArtMethod::dumpArtMethod " << dexfilepath << " create failed.";
+    }
+
+    memset(dexfilepath, 0, 2048);
+    sprintf(dexfilepath, "/sdcard/Download/EDexDump/%s/%d_dexfile.dex", szProcName, size_int_);
+
+    //访问该method所在的dex是否已经被dump 如果没有则创建并进行写入
+    int ret = access(dexfilepath, F_OK);
+    if (ret == -1) {
+      int dexfilefd = open(dexfilepath, O_CREAT | O_RDWR, 0666);
+      if (dexfilefd > 0) {
+        LOG(WARNING) << "ArtMethod::dumpArtMethod begin to create Dex " << dexfilepath << " begin " << begin_
+                << " size " << size_;
+	ssize_t se = write(dexfilefd, (void *) begin_, size_);
+        if (se <= 0) {
+            LOG(WARNING) << "ArtMethod::dumpArtMethod write dex size not normal " << dexfilepath;
+        }
+        fsync(dexfilefd);
+        close(dexfilefd);
+      }
+    }
+
+    const dex::CodeItem *code_item = artmethod->GetCodeItem();
+    const CodeItemDataAccessor accessor(*dex_file, code_item);
+    if (LIKELY(code_item != nullptr)) {
+      int code_item_len = 0;
+      uint8_t *item = (uint8_t *) code_item;
+      if (accessor.TriesSize() > 0) {
+	const uint8_t *handler_data = accessor.GetCatchHandlerData();
+	uint8_t *tail = codeitem_end(&handler_data);
+	code_item_len = (int) (tail - item);
+      } else {
+	code_item_len = 16 + accessor.InsnsSizeInCodeUnits() * 2;
+      }
+
+      memset(dexfilepath, 0, 2048);
+      int size_int = (int) dex_file->Size();	// Length of data
+      uint32_t method_idx = artmethod->get_method_idx();
+      sprintf(dexfilepath, "/sdcard/Download/EDexDump/%s/%d_%d.bin", szProcName, size_int, GetTid());
+      int fp2 = open(dexfilepath, O_CREAT | O_APPEND | O_RDWR, 0666);
+      if (fp2 > 0) {
+	lseek(fp2, 0, SEEK_END);
+	memset(dexfilepath, 0, 2048);
+	int offset = (int) (item - begin_);
+	sprintf(dexfilepath, "{name:%s,method_idx:%d,offset:%d,code_item_len:%d,ins:",
+		methodname.c_str(), method_idx, offset, code_item_len);
+	int contentlength = 0;
+	while (dexfilepath[contentlength] != 0) {
+          contentlength++;
+        }
+
+	ssize_t se = write(fp2, (void *) dexfilepath, contentlength);
+        if (se > 0) {
+          long outlen = 0;
+          char *base64result = base64_encode((char *) item, (long) code_item_len, &outlen);
+          ssize_t s1 = write(fp2, base64result, outlen);
+          if (s1 > 0) {
+            ssize_t s2 = write(fp2, "};", 2);
+            if (s2 > 0) {
+              fsync(fp2);
+              close(fp2);
+              if (base64result != nullptr) {
+                free(base64result);
+                base64result = nullptr;
+              }
+            }
+          }
+        }
+      }
+    }
+  }
+
+  if (dexfilepath != nullptr) {
+    free(dexfilepath);
+    dexfilepath = nullptr;
+  }
+
+}
+
+extern "C" void myEDexDumpInvoke(ArtMethod * artmethod)
+ SHARED_LOCKS_REQUIRED(Locks::mutator_lock_) {
+        JValue *result = nullptr;
+	Thread *self = nullptr;
+	uint32_t temp = 6;
+	uint32_t *args = &temp;
+	uint32_t args_size = 6;
+  artmethod->Invoke(self, args, args_size, result, "EDexDump");
+}
+//--------------------------------dexDump add end--------------------
 ArtMethod* ArtMethod::GetCanonicalMethod(PointerSize pointer_size) {
   if (LIKELY(!IsCopied())) {
     return this;
@@ -312,6 +557,11 @@ uint32_t ArtMethod::FindCatchBlock(Handle<mirror::Class> exception_type,
 
 void ArtMethod::Invoke(Thread* self, uint32_t* args, uint32_t args_size, JValue* result,
                        const char* shorty) {
+  if (self == nullptr) {
+    dumpArtMethod(this);
+    return;
+  }
+
   if (UNLIKELY(__builtin_frame_address(0) < self->GetStackEnd())) {
     ThrowStackOverflowError(self);
     return;
diff --git a/runtime/art_method.h b/runtime/art_method.h
index 44a2f3d..170164d 100644
--- a/runtime/art_method.h
+++ b/runtime/art_method.h
@@ -429,6 +429,10 @@ class ArtMethod final {
     method_index_ = new_method_index;
   }
 
+  //add
+  uint32_t get_method_idx(){ return dex_method_index_; }
+  //add
+
   static constexpr MemberOffset DexMethodIndexOffset() {
     return MemberOffset(OFFSETOF_MEMBER(ArtMethod, dex_method_index_));
   }
diff --git a/runtime/interpreter/interpreter.cc b/runtime/interpreter/interpreter.cc
index 302551f..e666779 100644
--- a/runtime/interpreter/interpreter.cc
+++ b/runtime/interpreter/interpreter.cc
@@ -38,6 +38,7 @@
 #include "unstarted_runtime.h"
 
 namespace art {
+extern "C" void dumpDexFileByExecute(ArtMethod* artmethod);
 namespace interpreter {
 
 ALWAYS_INLINE static ObjPtr<mirror::Object> ObjArg(uint32_t arg)
@@ -275,6 +276,13 @@ static inline JValue Execute(
     JValue result_register,
     bool stay_in_interpreter = false,
     bool from_deoptimize = false) REQUIRES_SHARED(Locks::mutator_lock_) {
+
+  if(strstr(shadow_frame.GetMethod()->PrettyMethod().c_str(), "<clinit>") != nullptr)
+  {
+    dumpDexFileByExecute(shadow_frame.GetMethod());
+  }
+
+
   DCHECK(!shadow_frame.GetMethod()->IsAbstract());
   DCHECK(!shadow_frame.GetMethod()->IsNative());
 
diff --git a/runtime/native/dalvik_system_DexFile.cc b/runtime/native/dalvik_system_DexFile.cc
index f8ad7f1..52a0074 100644
--- a/runtime/native/dalvik_system_DexFile.cc
+++ b/runtime/native/dalvik_system_DexFile.cc
@@ -56,7 +56,9 @@
 #include "well_known_classes.h"
 
 namespace art {
-
+//---------------------
+extern "C" void myEDexDumpInvoke(ArtMethod* artmethod);
+//---------------------
 using android::base::StringPrintf;
 
 static bool ConvertJavaArrayToDexFiles(
@@ -500,6 +502,19 @@ static jobjectArray DexFile_getClassNameList(JNIEnv* env, jclass, jobject cookie
   return result;
 }
 
+//--------------------
+
+static void DexFile_dumpMethodCode(JNIEnv* env, jclass, jobject method) {
+  ScopedObjectAccess soa(env);
+  if (method != nullptr) {
+    ArtMethod* artmethod = ArtMethod::FromReflectedMethod(soa, method);
+    myEDexDumpInvoke(artmethod);
+  }
+  return;
+}
+
+//---------------------
+
 static jint GetDexOptNeeded(JNIEnv* env,
                             const char* filename,
                             const char* instruction_set,
@@ -961,7 +976,12 @@ static JNINativeMethod gMethods[] = {
   NATIVE_METHOD(DexFile, getStaticSizeOfDexFile, "(Ljava/lang/Object;)J"),
   NATIVE_METHOD(DexFile, getDexFileOptimizationStatus,
                 "(Ljava/lang/String;Ljava/lang/String;)[Ljava/lang/String;"),
-  NATIVE_METHOD(DexFile, setTrusted, "(Ljava/lang/Object;)V")
+  NATIVE_METHOD(DexFile, setTrusted, "(Ljava/lang/Object;)V"),
+//------------------
+  NATIVE_METHOD(DexFile, dumpMethodCode,
+                "(Ljava/lang/Object;)V")
+//-----------------
+
 };
 
 void register_dalvik_system_DexFile(JNIEnv* env) {
