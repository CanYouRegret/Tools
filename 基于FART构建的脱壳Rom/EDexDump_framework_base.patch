diff --git a/core/api/current.txt b/core/api/current.txt
index 1de47b5..cab4cc0 100644
--- a/core/api/current.txt
+++ b/core/api/current.txt
@@ -7919,6 +7919,16 @@ package android.app.blob {
 
 }
 
+package android.app.dexdump {
+
+  public class EDexDump {
+    method @Nullable public static ClassLoader getClassloader();
+    method public static void startEDexDump();
+    field public static final String TARGET_SHELLING_PKG = "target.shelling.pkg";
+  }
+
+}
+
 package android.app.job {
 
   public class JobInfo implements android.os.Parcelable {
diff --git a/core/java/android/app/ActivityThread.java b/core/java/android/app/ActivityThread.java
index 0c64c86..eecc0c7 100644
--- a/core/java/android/app/ActivityThread.java
+++ b/core/java/android/app/ActivityThread.java
@@ -39,6 +39,7 @@ import android.annotation.Nullable;
 import android.app.assist.AssistContent;
 import android.app.assist.AssistStructure;
 import android.app.backup.BackupAgent;
+import android.app.dexdump.EDexDump;
 import android.app.servertransaction.ActivityLifecycleItem;
 import android.app.servertransaction.ActivityLifecycleItem.LifecycleState;
 import android.app.servertransaction.ActivityRelaunchItem;
@@ -147,6 +148,7 @@ import android.system.ErrnoException;
 import android.system.OsConstants;
 import android.system.StructStat;
 import android.telephony.TelephonyFrameworkInitializer;
+import android.text.TextUtils;
 import android.util.AndroidRuntimeException;
 import android.util.ArrayMap;
 import android.util.DisplayMetrics;
@@ -401,6 +403,7 @@ public final class ActivityThread extends ClientTransactionHandler
     boolean mSystemThread = false;
     boolean mSomeActivitiesChanged = false;
     /* package */ boolean mHiddenApiWarningShown = false;
+    boolean mIsEDexDumpRunning = false;
 
     // These can be accessed by multiple threads; mResourcesManager is the lock.
     // XXX For now we keep around information about all packages we have
@@ -3640,6 +3643,14 @@ public final class ActivityThread extends ClientTransactionHandler
             }
         }
 
+        //通过property来指定脱壳包名，并只在主进程只运行一次脱壳逻辑。
+        String property = SystemProperties.get(EDexDump.TARGET_SHELLING_PKG);
+        android.util.Log.d(TAG, "get shelling pkg = " + property + " processName = " + mBoundApplication.processName + " mIsEDexDumpRunning = " + mIsEDexDumpRunning);
+        if (TextUtils.equals(property, mBoundApplication.processName) && !mIsEDexDumpRunning) {
+            mIsEDexDumpRunning = true;
+            EDexDump.startEDexDump();
+        }
+
         return activity;
     }
 
diff --git a/core/java/android/app/dexdump/EDexDump.java b/core/java/android/app/dexdump/EDexDump.java
new file mode 100644
index 0000000..b88ceaf
--- /dev/null
+++ b/core/java/android/app/dexdump/EDexDump.java
@@ -0,0 +1,259 @@
+package android.app.dexdump;
+
+import android.annotation.NonNull;
+import android.annotation.Nullable;
+import android.app.Application;
+import android.util.Log;
+
+import java.lang.reflect.Constructor;
+import java.lang.reflect.Field;
+import java.lang.reflect.Method;
+import java.util.ArrayList;
+import java.util.List;
+
+public class EDexDump {
+
+    private static final String TAG = "EDexDump";
+    public static final String TARGET_SHELLING_PKG = "target.shelling.pkg";
+
+    EDexDump() {}
+
+    private static @Nullable Field getClassField(@NonNull ClassLoader classloader, @NonNull String class_name,
+                                      @NonNull String filedName) {
+
+        try {
+            Class obj_class = classloader.loadClass(class_name);
+            Field field = obj_class.getDeclaredField(filedName);
+            field.setAccessible(true);
+            return field;
+        } catch (Exception e) {
+            e.printStackTrace();
+        }
+        return null;
+
+    }
+
+    private static @Nullable Object getClassFieldObject(@NonNull ClassLoader classloader, @NonNull String class_name, @NonNull Object obj,
+                                             @NonNull String filedName) {
+
+        try {
+            Class obj_class = classloader.loadClass(class_name);
+            Field field = obj_class.getDeclaredField(filedName);
+            field.setAccessible(true);
+            Object result = null;
+            result = field.get(obj);
+            return result;
+        } catch (Exception e) {
+            e.printStackTrace();
+        }
+        return null;
+
+    }
+
+    private static @Nullable Object invokeStaticMethod(@NonNull String class_name,
+                                            @NonNull String method_name, @Nullable Class[] pareTyple, @Nullable Object[] pareVaules) {
+
+        try {
+            Class obj_class = Class.forName(class_name);
+            Method method = obj_class.getMethod(method_name, pareTyple);
+            return method.invoke(null, pareVaules);
+        } catch (Exception e) {
+            e.printStackTrace();
+        }
+        return null;
+
+    }
+
+
+    private static @Nullable Object getFieldOjbect(@NonNull String class_name, @NonNull Object obj,
+                                        @NonNull String filedName) {
+        try {
+            Class obj_class = Class.forName(class_name);
+            Field field = obj_class.getDeclaredField(filedName);
+            field.setAccessible(true);
+            return field.get(obj);
+        } catch (Exception e) {
+            e.printStackTrace();
+        }
+        return null;
+
+    }
+    public static @Nullable ClassLoader getClassloader() {
+        ClassLoader resultClassloader = null;
+
+        Object currentActivityThread = invokeStaticMethod(
+                "android.app.ActivityThread", "currentActivityThread",
+                new Class[]{}, new Object[]{});
+        Object mBoundApplication = getFieldOjbect(
+                "android.app.ActivityThread", currentActivityThread,
+                "mBoundApplication");
+        Object loadedApkInfo = getFieldOjbect(
+                "android.app.ActivityThread$AppBindData",
+                mBoundApplication, "info");
+        Application mApplication = (Application) getFieldOjbect("android.app.LoadedApk", loadedApkInfo, "mApplication");
+        resultClassloader = mApplication.getClassLoader();
+        return resultClassloader;
+    }
+
+    //dumpMethodCode 定义在DexFile中，各个Class被load之后，将各个Method传入，进行dump
+    private static void loadClassAndInvoke(@NonNull ClassLoader appClassloader, @NonNull String eachclassname, @NonNull Method dumpMethodCode_method) {
+        //Log.i(TAG, "go into loadClassAndInvoke->" + "classname:" + eachclassname);
+        Class resultclass = null;
+        try {
+            resultclass = appClassloader.loadClass(eachclassname);
+        } catch (Exception e) {
+            e.printStackTrace();
+            return;
+        } catch (Error e) {
+            e.printStackTrace();
+            return;
+        }
+        if (resultclass != null) {
+            try {
+                Constructor<?> cons[] = resultclass.getDeclaredConstructors();
+                for (Constructor<?> constructor : cons) {
+                    if (dumpMethodCode_method != null) {
+                        try {
+                            dumpMethodCode_method.invoke(null, constructor);
+                        } catch (Exception e) {
+                            e.printStackTrace();
+                            continue;
+                        } catch (Error e) {
+                            e.printStackTrace();
+                            continue;
+                        }
+                    } else {
+                        Log.e(TAG, "dumpMethodCode_method is null ");
+                    }
+
+                }
+            } catch (Exception e) {
+                e.printStackTrace();
+            } catch (Error e) {
+                e.printStackTrace();
+            }
+            try {
+                Method[] methods = resultclass.getDeclaredMethods();
+                if (methods != null) {
+                    for (Method m : methods) {
+                        if (dumpMethodCode_method != null) {
+                            try {
+                               dumpMethodCode_method.invoke(null, m);
+                             } catch (Exception e) {
+                                e.printStackTrace();
+                                continue;
+                            } catch (Error e) {
+                                e.printStackTrace();
+                                continue;
+                            }
+                        } else {
+                            Log.e(TAG, "dumpMethodCode_method is null ");
+                        }
+                    }
+                }
+            } catch (Exception e) {
+                e.printStackTrace();
+            } catch (Error e) {
+                e.printStackTrace();
+            }
+        }
+    }
+
+    private static void eDexDump() {
+        //拿到应用的class loader
+        ClassLoader appClassloader = getClassloader();
+
+        List<Object> dexFilesArray = new ArrayList<Object>();
+        Field pathList_Field = (Field) getClassField(appClassloader, "dalvik.system.BaseDexClassLoader", "pathList");
+        Object pathList_object = getFieldOjbect("dalvik.system.BaseDexClassLoader", appClassloader, "pathList");
+        Object[] ElementsArray = (Object[]) getFieldOjbect("dalvik.system.DexPathList", pathList_object, "dexElements");
+        Field dexFile_fileField = null;
+        try {
+            dexFile_fileField = (Field) getClassField(appClassloader, "dalvik.system.DexPathList$Element", "dexFile");
+        } catch (Exception e) {
+            e.printStackTrace();
+        }
+        Class DexFileClazz = null;
+        try {
+            DexFileClazz = appClassloader.loadClass("dalvik.system.DexFile");
+        } catch (Exception e) {
+            e.printStackTrace();
+        }
+        Method getClassNameList_method = null;
+        Method defineClass_method = null;
+        Method dumpMethodCode_method = null;
+
+        for (Method field : DexFileClazz.getDeclaredMethods()) {
+            if (field.getName().equals("getClassNameList")) {
+                getClassNameList_method = field;
+                getClassNameList_method.setAccessible(true);
+            }
+            if (field.getName().equals("defineClassNative")) {
+                defineClass_method = field;
+                defineClass_method.setAccessible(true);
+            }
+            if (field.getName().equals("dumpMethodCode")) {
+                dumpMethodCode_method = field;
+                dumpMethodCode_method.setAccessible(true);
+            }
+        }
+
+        //遍历ClassLoader中的每一个DexFile, 并获取类名列表。
+        Field mCookiefield = getClassField(appClassloader, "dalvik.system.DexFile", "mCookie");
+        for (int j = 0; j < ElementsArray.length; j++) {
+            Object element = ElementsArray[j];
+            Object dexfile = null;
+            try {
+                dexfile = (Object) dexFile_fileField.get(element);
+            } catch (Exception e) {
+                e.printStackTrace();
+            }
+            if (dexfile == null) {
+                continue;
+            }
+            if (dexfile != null) {
+                dexFilesArray.add(dexfile);
+                Object mcookie = getClassFieldObject(appClassloader, "dalvik.system.DexFile", dexfile, "mCookie");
+                if (mcookie == null) {
+                    continue;
+                }
+                String[] classnames = null;
+                try {
+                    classnames = (String[]) getClassNameList_method.invoke(dexfile, mcookie);
+                } catch (Exception e) {
+                    e.printStackTrace();
+                    continue;
+                } catch (Error e) {
+                    e.printStackTrace();
+                    continue;
+                }
+                if (classnames != null) {
+                    for (String eachclassname : classnames) {
+                        loadClassAndInvoke(appClassloader, eachclassname, dumpMethodCode_method);
+                    }
+                }
+
+            }
+        }
+        return;
+    }
+
+    public static void startEDexDump() {
+        new Thread(new Runnable() {
+
+            @Override
+            public void run() {
+                try {
+                    Log.e(TAG, "start sleep, wait for eDexDump thread start......");
+                    Thread.sleep(1 * 10 * 1000);
+                } catch (InterruptedException e) {
+                    e.printStackTrace();
+                }
+                Log.e(TAG, "sleep over and start eDexDemp thread");
+                eDexDump();
+                Log.e(TAG, "EDexDump run over");
+
+            }
+        }).start();
+    }
+}
